package vip.cdms.orecompose.utils

import androidx.compose.runtime.Composable
import androidx.compose.runtime.staticCompositionLocalOf
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontFamily
import androidx.compose.ui.text.style.BaselineShift
import androidx.compose.ui.text.withStyle
import orecompose.oreui.generated.resources.Res
import orecompose.oreui.generated.resources.monocraft_no_ligatures_v3_0
import org.jetbrains.compose.resources.ExperimentalResourceApi
import org.jetbrains.compose.resources.Font

@Suppress("SpellCheckingInspection")
val Monocraft
    @Composable
    get() = FontFamily(Font(Res.font.monocraft_no_ligatures_v3_0))
@Suppress("SpellCheckingInspection")
fun isMonocraftInclude(char: Char) = char.code in arrayOf(
    32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 
    48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63,
    64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,
    80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95,
    96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111,
    112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 160,
    161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177,
    178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 197, 198,
    199, 208, 215, 216, 222, 223, 230, 231, 236, 237, 238, 239, 240, 247, 248, 260,
    261, 271, 280, 281, 290, 291, 297, 299, 301, 309, 310, 311, 315, 316, 321, 322,
    325, 326, 338, 339, 350, 351, 357, 366, 464, 496, 536, 537, 538, 539, 1024, 1025,
    1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041,
    1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057,
    1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073,
    1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089,
    1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105,
    1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 8364, 8592,
    8593, 8594, 8595, 8656, 8657, 8658, 8659, 8704, 8759, 9786, 9787, 9829, 8240, 8211, 8212, 8216,
    8217, 8220, 8221, 8222, 8230, 8266, 8218, 8224, 8225, 8226, 8241, 8242, 8243, 8244, 8245, 8246,
    8247, 8249, 8250, 8251, 8252, 8253, 8258, 8264, 8265, 8267, 8270, 8271, 8273, 8274, 8279, 8209,
    254, 174, 188, 189, 190, 175, 8372, 8381, 8362, 8382, 8353, 8354, 8355, 8356, 8357, 8358,
    8361, 8363, 8365, 8366, 8368, 8369, 8370, 8371, 8373, 8374, 8375, 8376, 8377, 8378, 8379, 8380,
    8383, 8800, 8722, 8723, 8734, 8745, 8707, 8708, 8713, 8715, 8716, 8834, 8835, 8836, 8837, 8743,
    8744, 8891, 8892, 8893, 8741, 8802, 8902, 8721, 8868, 8869, 8866, 8872, 8788, 8705, 8756, 8757,
    8731, 8732, 8706, 8899, 8838, 8839, 8747, 8750, 8733, 1211, 1030, 1198, 1199, 1256, 1257, 1122,
    1123, 1140, 1141, 1216, 1138, 1139, 1178, 1179, 1170, 1171, 1200, 1201, 1240, 1241, 1174, 1175,
    1186, 1187, 1210, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925,
    926, 927, 928, 929, 931, 932, 933, 934, 935, 936, 937, 945, 946, 947, 948, 949,
    950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965,
    966, 967, 968, 969, 894, 903, 987, 8644, 8596, 8655, 8660, 8693, 65291, 399, 400, 390,
    398, 581, 477, 439, 503, 447, 540, 541, 548, 549, 457, 448, 451, 450, 449, 385,
    393, 401, 425, 434, 388, 389, 573, 410, 411, 544, 414, 415, 423, 424, 426, 440,
    441, 443, 444, 445, 446, 545, 564, 565, 566, 570, 571, 572, 582, 583, 574, 577,
    578, 579, 580, 584, 585, 586, 587, 588, 589, 590, 601, 603, 618, 660, 661, 684,
    596, 607, 613, 638, 670, 623, 633, 647, 652, 653, 654, 658, 665, 610, 668, 671,
    628, 640, 655, 625, 627, 626, 648, 598, 609, 673, 597, 657, 632, 669, 674, 635,
    641, 614, 651, 624, 620, 622, 664, 595, 599, 644, 608, 667, 615, 619, 616, 649,
    650, 600, 629, 612, 604, 606, 593, 594, 602, 605, 634, 672, 663, 662, 621, 631,
    639, 645, 646, 659, 666, 636, 699, 716, 729, 312, 306, 307, 7838, 7839, 7836, 7837,
    7932, 7933, 7934, 8304, 9728, 1280, 592, 1423, 383, 64256, 5792, 7424, 4256, 4351, 11520, 8960,
    591, 7935, 8528, 8352, 8308, 8309, 8310, 8311, 8312, 8313, 8314, 8315, 8316, 8317, 8318, 8305,
    8320, 8321, 8322, 8323, 8324, 8325, 8326, 8327, 8328, 8329, 8330, 8331, 8332, 8333, 8334, 8482,
    8471, 8498, 8513, 8516, 8523, 10696, 9876, 9760, 9729, 9736, 9778, 9781, 9789, 9792, 9794, 9893,
    9824, 9827, 9830, 9833, 9834, 9835, 9836, 9837, 9838, 9839, 9856, 9857, 9858, 9859, 9860, 9861,
    9889, 9935, 9875, 9960, 9786, 9787, 9785, 9730, 9748, 9732, 9924, 9731, 9872, 9828, 9831, 9825,
    9826, 9928, 9776, 9777, 9779, 9780, 9782, 9783, 9734, 9733, 9879, 9873, 1488, 1489, 1490, 1491,
    1492, 1493, 1494, 1495, 1496, 1497, 1499, 1500, 1502, 1501, 1504, 1503, 1505, 1506, 1508, 1507,
    1510, 1509, 1511, 1512, 1513, 1514, 1498, 1523, 1524, 1520, 1521, 1522, 1470, 1475, 1478, 10004,
    10052, 10060, 10084, 9993, 9998, 10083, 10008, 9986, 11088, 11096, 11242, 11243, 11800, 11822, 11829, 11832,
    11841, 11851, 10589, 5652, 5626, 5601, 1992, 12581, 11375, 11377, 11365, 11366, 11373, 42928, 42880, 42873,
    42881, 42842, 42843, 42792, 42793, 42809, 42811, 42800, 42927, 42801, 42791, 42790, 42920, 42921, 7450, 7543,
    7433, 7428, 7429, 7431, 7434, 7435, 7437, 7439, 7448, 7451, 7452, 7456, 7457, 7458, 10200, 1329,
    1330, 1331, 1332, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347,
    1348, 1349, 1350, 1351, 1352, 1353, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364,
    1365, 1366, 1369, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389,
    1390, 1391, 1392, 1393, 1394, 1395, 1396, 1397, 1398, 1399, 1400, 1401, 1402, 1403, 1404, 1405,
    1406, 1407, 1408, 1409, 1410, 1411, 1412, 1413, 1414, 1415, 1336, 1370, 1371, 1372, 1373, 1374,
    1375, 1376, 1416, 1333, 1354, 1418, 9167, 9193, 9194, 9197, 9198, 9199, 9204, 9205, 9206, 9207,
    9208, 9209, 9210, 9211, 9212, 9213, 8987, 8986, 8962, 8984, 9203, 9650, 9654, 9660, 9664, 9679,
    9702, 9688, 9633, 9651, 9655, 9661, 9665, 9670, 9671, 9675, 9678, 64257, 64258, 64259, 64261, 64330,
    64299, 64334, 64324, 64315, 64287, 64285, 64331, 64309, 64332, 64305, 65533, 5794, 5795, 5796, 5797, 5798,
    5799, 5800, 5801, 5802, 5803, 5804, 5805, 5806, 5807, 5808, 5809, 5810, 5811, 5812, 5814, 5815,
    5816, 5817, 5818, 5819, 5820, 5821, 5822, 5823, 5824, 5825, 5826, 5827, 5828, 5829, 5830, 5831,
    5832, 5833, 5834, 5835, 5836, 5837, 5838, 5839, 5840, 5841, 5842, 5843, 5844, 5845, 5846, 5847,
    5848, 5849, 5850, 5851, 5852, 5853, 5854, 5855, 5856, 5857, 5858, 5859, 5860, 5861, 5862, 5863,
    5864, 5865, 5866, 5867, 5868, 5869, 5870, 5871, 5872, 5873, 5874, 5875, 5876, 5877, 5878, 5879,
    5880, 7569, 4257, 4258, 4259, 4260, 4261, 4262, 4263, 4264, 4265, 4266, 4267, 4268, 4269, 4270,
    4271, 4272, 4273, 4274, 4275, 4276, 4277, 4278, 4279, 4280, 4281, 4282, 4283, 4284, 4285, 4286,
    4287, 4288, 4289, 4290, 4291, 4292, 4293, 4295, 4301, 4304, 4305, 4306, 4307, 4308, 4309, 4310,
    4311, 4312, 4313, 4314, 4315, 4316, 4317, 4318, 4319, 4320, 4321, 4322, 4323, 4324, 4325, 4326,
    4327, 4328, 4329, 4330, 4331, 4332, 4333, 4334, 4335, 4336, 4337, 4338, 4339, 4340, 4341, 4342,
    4343, 4344, 4345, 4346, 4347, 4348, 4349, 4350, 11521, 11522, 11523, 11524, 11525, 11526, 11553, 11527,
    11528, 11529, 11530, 11531, 11532, 11554, 11533, 11534, 11535, 11536, 11537, 11538, 11555, 11539, 11540, 11541,
    11542, 11543, 11544, 11545, 11546, 11547, 11548, 11549, 11550, 11556, 11551, 11552, 11557, 8539, 8540, 8541,
    8542, 8531, 8532, 8529, 8533, 8534, 8535, 8537, 8538, 8543, 8585, 12306,
)

typealias McFontProcessor = @Composable CharSequence.() -> CharSequence
val DefaultMcFontProcessor: McFontProcessor = { useFont(Monocraft, -.05f, ::isMonocraftInclude) }
val LocalMcFontProcessor = staticCompositionLocalOf<McFontProcessor?> { DefaultMcFontProcessor }

@Composable
fun CharSequence.mcFont() = LocalMcFontProcessor.current?.invoke(this) ?: this

fun CharSequence.useFont(fontFamily: FontFamily, baselineShift: Float? = null, usingFont: (Char) -> Boolean) = buildAnnotatedString {
    val text = this@useFont
    var i = 0
    while (i < text.length) {
        val c = text[i]
        if (c.code in 0xd800..0xdbff) {
//            append(c)
//            text.getOrNull(i + 1)?.let { append(it) }
            append(text.subSequence(i, i + if (text.getOrNull(i + 1) != null) 2 else 1))
            i += 2
            continue
        }
        if (!usingFont(c)) {
//            append(c)
            append(text.subSequence(i, i + 1))
            i++
            continue
        }
        withStyle(SpanStyle(
            fontFamily = fontFamily,
            baselineShift = baselineShift?.let { BaselineShift(it) }
        )) {
//            append(c)
            append(text.subSequence(i, i + 1))
        }
        i++
    }
}
